# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Issue Opened

on:
  issues:
    types:
      - opened

# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

env:
  AWS_REGION: ap-northeast-2 # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: 'fansign-shop-main' # set this to your Amazon ECR repository name

permissions:
  contents: read

jobs:
  ci:
    #     if: github.event.pull_request.merged == true
    name: ci
    runs-on: ubuntu-latest
    environment: main
    outputs:
      IMAGE_TAG: ${{ github.sha }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  cd:
    needs: [ci]
    name: cd
    runs-on: ubuntu-latest
    steps:
      - name: checkout target repo
        uses: actions/checkout@v3
        with:
          repository: dev-git-ops/gitOpsConfig
          token: ${{ secrets.GITOPSCONFIG }}

      - name: replace tag
        uses: mikefarah/yq@master
        env:
          VALUE: 594311320189.dkr.ecr.ap-northeast-2.amazonaws.com/fansign-shop-main:${{needs.ci.outputs.IMAGE_TAG}}
        with:
          cmd: yq eval -i '.spec.template.spec.containers[0].image = env(VALUE)' 'kus-apps/fansign-shop/deployment.yaml'

      - name: Push config repo
        run: |
          git config --global user.email "kkhdevs@gmail.com"
          git config --global user.name "KyungHwanKim-devs"
          git config --global init.defaultBranch "main"
          git add .
          git commit -m "test"
          git push origin main
